
  def solve(self, b):
    print("OK!")
    arr1 = []
    for i in range(self.n):
      arr1.append(self.a[i] + [b[i]])
    a1 = Matrix(arr1)
    print("OK!!")
    for i in range(self.n - 1):
      row_id = i
      for j in range(i + 1, self.n):
        if abs(a1.a[j][i]) > abs(a1.a[row_id][i]):
          row_id = j
      if not a1.a[row_id][i]:
        break
      a1.swap_rows(row_id, i)

      for j in range(i + 1, self.n):
        val = - a1.a[j][i] / a1.a[i][i]
        a1.add_rows(j, i, val)

    for i in range(self.n):
      if i < a1.m - 1:
        if not a1.a[i][i]:
          raise MatrixError(self, a1)
      else:
        for j in range(self.m):
          if not (a1.a[i][j] == 0 and a1.a[i][-1] == 0):
            raise MatrixError(self, a1)

    ans = [0] * self.m
    for i in range(self.n - 1, -1, -1):
      for j in range(i - 1, -1, -1):
        a1.add_rows(j, i, - (a1.a[j][i] / a1.a[i][i]))

    for i in range(self.n):
      a1.mul_row(i, 1 / a1.a[i][i])
      ans[i] = a1.a[i][-1]
    return ans





  def solve(self, b):
    print("OK!")
    arr1 = []
    for i in range(self.n):
      arr1.append(self.a[i] + [b[i]])
    a1 = Matrix(arr1)
    print("OK!!")
    for i in range(self.n - 1):
      row_id = i
      for j in range(i + 1, self.n):
        if abs(a1.a[j][i]) > abs(a1.a[row_id][i]):
          row_id = j
      if not a1.a[row_id][i]:
        break
      a1.swap_rows(row_id, i)

      for j in range(i + 1, self.n):
        val = - a1.a[j][i] / a1.a[i][i]
        a1.add_rows(j, i, val)

    for i in range(self.n):
      if i < a1.m - 1:
        if not a1.a[i][i]:
          raise MatrixError(self, a1)
      else:
        for j in range(self.m):
          if not (a1.a[i][j] == 0 and a1.a[i][-1] == 0):
            raise MatrixError(self, a1)

    ans = [0] * self.m
    for i in range(self.n - 1, -1, -1):
      for j in range(i - 1, -1, -1):
        a1.add_rows(j, i, - (a1.a[j][i] / a1.a[i][i]))

    for i in range(self.n):
      a1.mul_row(i, 1 / a1.a[i][i])
      ans[i] = a1.a[i][-1]
    return ans#
# def solve(self, b):
#     print("OK!")
#     arr1 = []
#     for i in range(self.n):
#         arr1.append(self.a[i] + [b[i]])
#     a1 = Matrix(arr1)
#     print("OK!!")
#     for i in range(self.n - 1):
#         row_id = i
#         for j in range(i + 1, self.n):
#             if abs(a1.a[j][i]) > abs(a1.a[row_id][i]):
#                 row_id = j
#         if not a1.a[row_id][i]:
#             break
#         a1.swap_rows(row_id, i)
#
#         for j in range(i + 1, self.n):
#             val = - a1.a[j][i] / a1.a[i][i]
#             a1.add_rows(j, i, val)
#
#     for i in range(self.n):
#         if i < a1.m - 1:
#             if not a1.a[i][i]:
#                 raise MatrixError(self, a1)
#         else:
#             for j in range(self.m):
#                 if not (a1.a[i][j] == 0 and a1.a[i][-1] == 0):
#                     raise MatrixError(self, a1)
#
#     ans = [0] * self.m
#     for i in range(self.n - 1, -1, -1):
#         for j in range(i - 1, -1, -1):
#             a1.add_rows(j, i, - (a1.a[j][i] / a1.a[i][i]))
#
#     for i in range(self.n):
#         a1.mul_row(i, 1 / a1.a[i][i])
#         ans[i] = a1.a[i][-1]
#     return ans


# def solve(self, b):
#     print("OK!")
#     arr1 = []
#     for i in range(self.n):
#         arr1.append(self.a[i] + [b[i]])
#     a1 = Matrix(arr1)
#     print("OK!!")
#     for i in range(self.n - 1):
#         row_id = i
#         for j in range(i + 1, self.n):
#             if abs(a1.a[j][i]) > abs(a1.a[row_id][i]):
#                 row_id = j
#         if not a1.a[row_id][i]:
#             break
#         a1.swap_rows(row_id, i)
#
#         for j in range(i + 1, self.n):
#             val = - a1.a[j][i] / a1.a[i][i]
#             a1.add_rows(j, i, val)
#
#     for i in range(self.n):
#         if i < a1.m - 1:
#             if not a1.a[i][i]:
#                 raise MatrixError(self, a1)
#         else:
#             for j in range(self.m):
#                 if not (a1.a[i][j] == 0 and a1.a[i][-1] == 0):
#                     raise MatrixError(self, a1)
#
#     ans = [0] * self.m
#     for i in range(self.n - 1, -1, -1):
#         for j in range(i - 1, -1, -1):
#             a1.add_rows(j, i, - (a1.a[j][i] / a1.a[i][i]))
#
#     for i in range(self.n):
#         a1.mul_row(i, 1 / a1.a[i][i])
#         ans[i] = a1.a[i][-1]
#     return ans